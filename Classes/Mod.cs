// <copyright file="Mod.cs" company="Paul Layne">
// Copyright (c) Paul Layne. All rights reserved.
// <auto-generated />
namespace HonjoMarketBot.Classes
{
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using BotLib.BotClient;
    using BotLib.Protocols;
    using BotLib.Protocols.Queuing;
    using Microsoft.Extensions.DependencyInjection;
    using NQutils;
    using NQutils.Sql;
    using Orleans;
    using NQ.Router;
    using Backend;
    using Backend.Business;
    using System.Net.Http;

    /// Mod base class
    public class Mod
    {
        /// <summary>
        /// Rest Client
        /// </summary>
        public static IDuClientFactory RestDuClientFactory => ServiceProvider.GetRequiredService<IDuClientFactory>();
        
        /// <summary>
        /// Service Provider
        /// </summary>
        protected static IServiceProvider ServiceProvider;

        /// <summary>
        /// Orleans
        /// </summary>
        protected static IClusterClient Orleans;

        /// <summary>
        /// Data Accessor
        /// </summary>
        protected static IDataAccessor DataAccessor;

        /// <summary>
        ///  The bot itself
        /// </summary>
        protected static Client Bot;

        /// <summary>
        /// Logins As Bot
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="allowExisting"></param>
        /// <param name="randomize"></param>
        /// <returns></returns>
        public static Task<Client> CreateUser(string prefix, bool allowExisting = false, bool randomize = true)
        {
            string username = prefix;
            if (randomize)
            {
                // Do not use random utilities as they are using tests random (that is seeded), and we want to be able to start the same test multiple times
                Random r = new Random(Guid.NewGuid().GetHashCode());
                const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
                username = prefix + '-' + new string(Enumerable.Repeat(0, 127 - prefix.Length).Select(_ => chars[r.Next(chars.Length)]).ToArray());
            }

            LoginInformations pi = LoginInformations.BotLogin(username, Environment.GetEnvironmentVariable("BOT_LOGIN"), Environment.GetEnvironmentVariable("BOT_PASSWORD"));
            return Client.FromFactory(RestDuClientFactory, pi, allowExising: allowExisting);
        }

        /// <summary>
        /// Configure the App
        /// </summary>
        /// <returns></returns>
        public static async Task Setup()
        {
            var services = new ServiceCollection();

            //services.RegisterCoreServices();
            var qurl = Environment.GetEnvironmentVariable("QUEUEING");

            if (string.IsNullOrEmpty(qurl))
            {
                qurl = "http://queueing:9630";
            }

            services
            .AddSingleton<ISql, Sql>()
            .AddInitializableSingleton<IGameplayBank, GameplayBank>()
            .AddSingleton<ILocalizationManager, LocalizationManager>()
            .AddTransient<IDataAccessor, DataAccessor>()
            .AddOrleansClient("IntegrationTests")
            .AddHttpClient()
            .AddTransient<NQutils.Stats.IStats, NQutils.Stats.FakeIStats>()
            .AddSingleton<IQueuing, RealQueuing>(sp => new RealQueuing(qurl, sp.GetRequiredService<IHttpClientFactory>().CreateClient()))
            .AddSingleton<IDuClientFactory, BotLib.Protocols.GrpcClient.DuClientFactory>();
            
            var sp = services.BuildServiceProvider();
            ServiceProvider = sp;
            await ServiceProvider.StartServices().ConfigureAwait(false);
            ClientExtensions.SetSingletons(sp);
            ClientExtensions.UseFactory(sp.GetRequiredService<IDuClientFactory>());
            Orleans = ServiceProvider.GetRequiredService<IClusterClient>();
            DataAccessor = ServiceProvider.GetRequiredService<IDataAccessor>();
        }

        /// <summary>
        /// Simple Start Function
        /// </summary>
        /// <returns></returns>
        public async Task Start()
        {
            try
            {
                await this.Loop().ConfigureAwait(false);
            }
            catch (Exception e)
            {
                Console.WriteLine($"{e}\n{e.StackTrace}");
                throw;
            }
        }

        /// <summary>
        /// Loop Function
        /// </summary>
        /// <returns></returns>
        public virtual Task Loop()
        {
            return Task.CompletedTask;
        }

        /// <summary>
        /// A Safe loop with a reconnect
        /// </summary>
        /// <param name="action"></param>
        /// <param name="exceptionDelayMs"></param>
        /// <param name="reconnect"></param>
        /// <returns></returns>
        public async Task SafeLoop(Func<Task> action, int exceptionDelayMs, Func<Task> reconnect)
        {
            while (true)
            {
                try
                {
                    await action().ConfigureAwait(false);
                }
                catch (NQutils.Exceptions.BusinessException be) when (be.error.code == NQ.ErrorCode.InvalidSession)
                {
                    Console.WriteLine("reconnecting");
                    await reconnect().ConfigureAwait(false);
                    await Task.Delay(exceptionDelayMs).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Exception in mod action: {e}\n{e.StackTrace}");
                    await Task.Delay(exceptionDelayMs).ConfigureAwait(false);
                }
            }
        }
    }
}